name: Deploy to EC2
on:
  push:
    branches:
      - dev
# 코드의 내용을 Github Actions 에서 사용하는 VM(action 을 실행하는 주체)이 읽을 수 있도록 허용
permissions:
  contents: read
jobs:
  # 작업의 이름 지정
  build:
    # 가상의 작업 공간(가상 서버)에 ubuntu 최신 버전 설치 후 script 실행
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Get Properties from Github Secret And Paste
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.PROPERTIES }}" > ./application.yml
        shell: bash
          
      - name: Grant Execute Permission For Gradlew
        run: chmod +x ./gradlew
        
      - name: Build With Gradle
        run: ./gradlew clean build -x test --no-daemon
        
      - name: Docker build & Push to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/pinup:latest .
          docker push ${{ secrets.DOCKER_REPO }}/pinup:latest
      
      - name: Deploy Images with Docker Compose
        uses: appleboy/ssh-action@master
        env:
          COMPOSE: "/home/ubuntu/compose/docker-compose.yml"
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: COMPOSE
          script: |
            sudo docker-compose -f $COMPOSE down --rmi all
            sudo docker pull ${{ secrets.DOCKER_REPO }}/pinup
            sudo docker-compose -f $COMPOSE up -d
