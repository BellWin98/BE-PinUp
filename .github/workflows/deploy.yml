name: Deploy to EC2
on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
# 코드의 내용을 Github Actions 에서 사용하는 VM(action 을 실행하는 주체)이 읽을 수 있도록 허용
permissions:
  contents: read
jobs:
  # 작업의 이름 지정
  build:
    # 가상의 작업 공간(가상 서버)에 ubuntu 최신 버전 설치 후 script 실행
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant Execute Permission For Gradlew
        run: chmod +x ./gradlew

      - name: Build With Gradle
        run: ./gradlew clean build -x test --no-daemon -Djasypt.encryptor.password=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}

      - name: Docker build & Push to Docker Hub dev repo
        if: contains(github.ref, 'dev')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/pinup-dev:latest .
          docker push ${{ secrets.DOCKER_REPO }}/pinup-dev:latest

      - name: Docker build & Push to Docker Hub prod repo
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/pinup-prod:latest .
          docker push ${{ secrets.DOCKER_REPO }}/pinup-prod:latest

      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        id: deploy-dev
        if: contains(github.ref, 'dev')
        env:
          COMPOSE: "/home/ubuntu/compose/pinup-dev/docker-compose.yml"
        with:
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY_DEV }}
          envs: COMPOSE
          script: |
            sudo docker stop pinup-dev
            sudo docker rm -f $(sudo docker ps --filter 'status=exited' -a -q)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/pinup-dev
            sudo docker rmi $(docker images -f "dangling=true" -q)
            sudo docker-compose -f $COMPOSE up -d

      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        env:
          COMPOSE: "/home/ubuntu/compose/pinup-prod/docker-compose.yml"
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          envs: COMPOSE
          script: |
            sudo docker stop pinup-prod
            sudo docker rm -f $(sudo docker ps --filter 'status=exited' -a -q)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/pinup-prod
            sudo docker rmi $(docker images -f "dangling=true" -q)
            sudo docker-compose -f $COMPOSE up -d            
