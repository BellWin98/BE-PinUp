# workflow(스크립트 전체)의 이름을 지정
name: Deploy to EC2 With Jar

# push 이벤트 지정 (트리거 동작)
# dev branch에 push 될 때마다 workflow가 실행되도록 지정
on:
  push:
    branches:
      - dev

# 코드의 내용을 Github Actions 에서 사용하는 VM(action 을 실행하는 주체)이 읽을 수 있도록 허용
permissions:
  contents: read

jobs:
  # 작업의 이름 지정
  build:
    # 가상의 작업 공간(가상 서버)에 ubuntu 최신 버전 설치 후 script 실행
    runs-on: ubuntu-latest
    steps:
      # 소스 코드를 ubuntu로 가져옴
      - uses: actions/checkout@v3

      # github 소스 코드를 가상의 작업 공간
      - name: Set up JDK 17
        # 쉽게 자바를 설치할 수 있는 라이브러리를 받아와서 java 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        # 배포할 폴더로 이동
        working-directory: .
        # 실행 가능한 jar파일만 생성 (plain jar 미생성)
        # ./gradlew bootJar
        run: |
          chmod +x ./gradlew 
          ./gradlew clean build -x test

      # Dockerfile 을 통해 이미지 빌드 및 docker repo 에 push
      - name: Docker build & Push to Docker Repo

        # -f Dockerfile: 사용할 Dockerfile 명시
        # -t: 빌드된 이미지에 태그 지정하는 옵션
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/pinup .
          docker push ${{ secrets.DOCKER_REPO }}/pinup

      - name: Deploy to Server
        # 지정한 서버에 ssh 로 접속하고, script 실행
        # script: 기존의 모든 도커 컨테이너 강제 삭제
        # docker image prune -f: 사용되지 않는 도커 이미지 강제 삭제하여 디스크 공간 확보
        uses: appleboy/ssh-action@master
        env:
          COMPOSE: "/home/ubuntu/docker-compose.yml"
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker-compose -f $COMPOSE down --rmi all
            sudo docker pull ${{ secrets.DOCKER_REPO }}/pinup
            sudo docker-compose -f $COMPOSE up -d